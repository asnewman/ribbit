#!/bin/bash

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Print colored output
print_error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

print_success() {
    echo -e "${GREEN}$1${NC}"
}

print_info() {
    echo -e "${YELLOW}$1${NC}"
}

# Usage information
usage() {
    echo "Usage:"
    echo "  ribbit <branch-name> [--share|--clone file1,file2,...]  Create new agent worktree"
    echo "  ribbit share <file1,file2,...>                          Share additional files in current worktree"
    echo "  ribbit clone <file1,file2,...>                          Clone additional files in current worktree"
    echo "  ribbit cleanup                                           Clean up current agent worktree"
    echo "  ribbit list                                              List active agent worktrees"
    echo ""
    echo "Options:"
    echo "  --share   Symlink files from main repo (changes affect main repo)"
    echo "  --clone   Copy files from main repo (independent copies)"
    echo ""
    echo "Examples:"
    echo "  ribbit implement-user-auth --share .env,.env.local"
    echo "  ribbit fix-login-bug --clone .env,.env.local"
    echo "  ribbit share .env.production,config/database.yml"
    echo "  ribbit clone secrets.json"
    echo "  ribbit cleanup"
}

# Check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Not in a git repository"
        exit 1
    fi
}

# Get repository name
get_repo_name() {
    basename "$(git rev-parse --show-toplevel)"
}

# Parse command line arguments
parse_args() {
    COMMAND=""
    BRANCH_NAME=""
    SHARE_FILES=""
    CLONE_FILES=""
    FILE_MODE=""
    
    if [[ $# -eq 0 ]]; then
        usage
        exit 1
    fi
    
    case "$1" in
        "cleanup")
            COMMAND="cleanup"
            ;;
        "list")
            COMMAND="list"
            ;;
        "share")
            COMMAND="share"
            SHARE_FILES="$2"
            ;;
        "clone")
            COMMAND="clone"
            CLONE_FILES="$2"
            ;;
        "--help"|"-h")
            usage
            exit 0
            ;;
        *)
            COMMAND="create"
            BRANCH_NAME="$1"
            shift
            
            # Parse remaining arguments
            while [[ $# -gt 0 ]]; do
                case $1 in
                    --share)
                        if [[ -n "$CLONE_FILES" ]]; then
                            print_error "Cannot use both --share and --clone"
                            exit 1
                        fi
                        SHARE_FILES="$2"
                        FILE_MODE="share"
                        shift 2
                        ;;
                    --clone)
                        if [[ -n "$SHARE_FILES" ]]; then
                            print_error "Cannot use both --share and --clone"
                            exit 1
                        fi
                        CLONE_FILES="$2"
                        FILE_MODE="clone"
                        shift 2
                        ;;
                    *)
                        print_error "Unknown option: $1"
                        usage
                        exit 1
                        ;;
                esac
            done
            ;;
    esac
}

# Main execution
main() {
    parse_args "$@"
    
    case "$COMMAND" in
        "create")
            create_worktree
            ;;
        "cleanup")
            cleanup_worktree
            ;;
        "list")
            list_worktrees
            ;;
        "share")
            share_files
            ;;
        "clone")
            clone_files_to_worktree
            ;;
    esac
}

# Create shared file symlinks
create_symlinks() {
    local share_files="$1"
    local main_repo_dir="$2"
    
    if [[ -z "$share_files" ]]; then
        return 0
    fi
    
    IFS=',' read -ra FILES <<< "$share_files"
    for file in "${FILES[@]}"; do
        # Remove leading/trailing whitespace
        file=$(echo "$file" | xargs)
        
        if [[ ! -f "$main_repo_dir/$file" ]]; then
            print_error "Shared file does not exist: $file"
            exit 1
        fi
        
        # Create directory structure if needed
        local dir=$(dirname "$file")
        if [[ "$dir" != "." ]]; then
            mkdir -p "$dir"
        fi
        
        # Create symlink
        ln -sf "$main_repo_dir/$file" "$file"
        print_info "Linked: $file"
    done
}

# Copy files from main repo
copy_files() {
    local clone_files="$1"
    local main_repo_dir="$2"
    
    if [[ -z "$clone_files" ]]; then
        return 0
    fi
    
    IFS=',' read -ra FILES <<< "$clone_files"
    for file in "${FILES[@]}"; do
        # Remove leading/trailing whitespace
        file=$(echo "$file" | xargs)
        
        if [[ ! -f "$main_repo_dir/$file" ]]; then
            print_error "File to clone does not exist: $file"
            exit 1
        fi
        
        # Create directory structure if needed
        local dir=$(dirname "$file")
        if [[ "$dir" != "." ]]; then
            mkdir -p "$dir"
        fi
        
        # Copy file
        cp "$main_repo_dir/$file" "$file"
        print_info "Copied: $file"
    done
}

# Create new agent worktree
create_worktree() {
    check_git_repo
    
    local repo_name=$(get_repo_name)
    local main_repo_dir=$(git rev-parse --show-toplevel)
    # Sanitize branch name for directory naming (replace / with -)
    local sanitized_branch_name="${BRANCH_NAME//\//-}"
    local worktree_dir="../${repo_name}-${sanitized_branch_name}"
    
    # Check if branch already exists
    local branch_exists=false
    if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
        branch_exists=true
    fi
    
    # Check if worktree directory already exists
    if [[ -d "$worktree_dir" ]]; then
        print_error "Worktree directory already exists: $worktree_dir"
        exit 1
    fi
    
    print_info "Creating worktree: $worktree_dir"
    
    # Create the worktree with appropriate branch handling
    if [[ "$branch_exists" == true ]]; then
        print_info "Using existing branch: $BRANCH_NAME"
        git worktree add "$worktree_dir" "$BRANCH_NAME"
    else
        print_info "Creating new branch: $BRANCH_NAME"
        git worktree add "$worktree_dir" -b "$BRANCH_NAME"
    fi
    
    # Change to worktree directory
    cd "$worktree_dir"
    
    # Handle file sharing/copying based on mode
    if [[ "$FILE_MODE" == "share" ]]; then
        print_info "Creating symlinks for shared files..."
        create_symlinks "$SHARE_FILES" "$main_repo_dir"
    elif [[ "$FILE_MODE" == "clone" ]]; then
        print_info "Copying files from main repo..."
        copy_files "$CLONE_FILES" "$main_repo_dir"
    fi
    
    print_success "Worktree created successfully!"
    print_success "You are now in: $(pwd)"
    print_success "Your environment is now agent ready!"
    
    # Execute a new shell in the worktree directory so user stays there
    exec "$SHELL"
}

# Clean up current agent worktree
cleanup_worktree() {
    check_git_repo
    
    local current_dir=$(pwd)
    local worktree_list=$(git worktree list --porcelain)
    local is_agent_worktree=false
    local main_repo_dir=""
    
    # Find the main repository directory from worktree list
    while IFS= read -r line; do
        if [[ $line == worktree* ]]; then
            local worktree_path=$(echo "$line" | cut -d' ' -f2)
            if [[ "$current_dir" == "$worktree_path" ]] && [[ $(basename "$current_dir") != $(basename "$main_repo_dir" 2>/dev/null || echo "") ]]; then
                # Check if this looks like a worktree created by ribbit (repo-name-branch-name pattern)
                local dir_name=$(basename "$current_dir")
                if [[ "$dir_name" =~ ^[^-]+-.+$ ]]; then
                    is_agent_worktree=true
                fi
            else
                # Check if this is the main repo (no branch info means it's the main worktree)
                if [[ -z "$main_repo_dir" ]]; then
                    main_repo_dir="$worktree_path"
                fi
            fi
        fi
    done <<< "$worktree_list"
    
    if [[ "$is_agent_worktree" == false ]]; then
        print_error "Not in a ribbit worktree directory"
        print_info "Cleanup must be run from within a ribbit worktree"
        exit 1
    fi
    
    # Get current branch name before leaving directory
    local branch_name=$(git branch --show-current)
    
    print_info "Cleaning up ribbit worktree: $(basename "$current_dir")"
    print_info "Branch: $branch_name"
    
    # Move to main repository directory first
    cd "$main_repo_dir"
    
    # Remove the worktree
    print_info "Removing worktree..."
    git worktree remove "$current_dir" --force
    
    print_info "Branch '$branch_name' preserved"
    
    print_success "Cleanup completed!"
    print_info "You are now in: $(pwd)"
    
    # Start a new shell in the main repo directory
    exec "$SHELL"
}

# Check if current directory is a ribbit worktree
check_ribbit_worktree() {
    check_git_repo
    
    local current_dir=$(pwd)
    local worktree_list=$(git worktree list --porcelain)
    local is_agent_worktree=false
    
    # Check if we're in a ribbit worktree
    while IFS= read -r line; do
        if [[ $line == worktree* ]]; then
            local worktree_path=$(echo "$line" | cut -d' ' -f2)
            if [[ "$current_dir" == "$worktree_path" ]]; then
                local dir_name=$(basename "$current_dir")
                if [[ "$dir_name" =~ ^[^-]+-.+$ ]]; then
                    is_agent_worktree=true
                    break
                fi
            fi
        fi
    done <<< "$worktree_list"
    
    if [[ "$is_agent_worktree" == false ]]; then
        print_error "Not in a ribbit worktree directory"
        print_info "This command must be run from within a ribbit worktree"
        exit 1
    fi
    
    # Check if we're in main/master branch (prevent share/clone in main repo)
    local current_branch=$(git branch --show-current)
    if [[ "$current_branch" == "main" || "$current_branch" == "master" ]]; then
        print_error "Cannot share/clone files in main/master branch"
        print_info "Share and clone commands are only allowed in ribbit worktrees"
        exit 1
    fi
}

# Find main repository directory
find_main_repo() {
    local worktree_list=$(git worktree list --porcelain)
    local main_repo_dir=""
    
    while IFS= read -r line; do
        if [[ $line == worktree* ]]; then
            local worktree_path=$(echo "$line" | cut -d' ' -f2)
            # Check if this is likely the main repo (first one without branch info)
            if [[ -z "$main_repo_dir" ]]; then
                main_repo_dir="$worktree_path"
            fi
        elif [[ $line == branch* ]]; then
            # If we see a branch, the previous worktree wasn't main
            continue
        fi
    done <<< "$worktree_list"
    
    echo "$main_repo_dir"
}

# Share additional files in current worktree
share_files() {
    check_ribbit_worktree
    
    if [[ -z "$SHARE_FILES" ]]; then
        print_error "No files specified to share"
        exit 1
    fi
    
    local main_repo_dir=$(find_main_repo)
    print_info "Sharing files from main repo..."
    create_symlinks "$SHARE_FILES" "$main_repo_dir"
    print_success "Files shared successfully!"
}

# Clone additional files to current worktree
clone_files_to_worktree() {
    check_ribbit_worktree
    
    if [[ -z "$CLONE_FILES" ]]; then
        print_error "No files specified to clone"
        exit 1
    fi
    
    local main_repo_dir=$(find_main_repo)
    print_info "Copying files from main repo..."
    copy_files "$CLONE_FILES" "$main_repo_dir"
    print_success "Files copied successfully!"
}

# List all agent worktrees
list_worktrees() {
    check_git_repo
    
    local worktree_list=$(git worktree list --porcelain)
    local found_agents=false
    
    print_info "Active ribbit worktrees:"
    echo
    
    # Parse worktree list and show agent worktrees
    local current_worktree=""
    local current_branch=""
    
    while IFS= read -r line; do
        if [[ $line == worktree* ]]; then
            current_worktree=$(echo "$line" | cut -d' ' -f2-)
        elif [[ $line == branch* ]]; then
            current_branch=$(echo "$line" | cut -d' ' -f2-)
            
            # Check if this is a ribbit worktree (repo-name-branch-name pattern)
            local dir_name=$(basename "$current_worktree")
            if [[ "$dir_name" =~ ^[^-]+-.+$ ]] && [[ "$current_worktree" != */.git/worktrees/* ]]; then
                # Extract branch name (everything after first dash and repo name)
                local repo_part=$(echo "$dir_name" | cut -d'-' -f1)
                local branch_part=$(echo "$dir_name" | cut -d'-' -f2-)
                
                found_agents=true
                printf "  %-30s %s\n" "$branch_part" "$current_worktree"
                printf "  %-30s branch: %s\n" "" "$current_branch"
                echo
            fi
        fi
    done <<< "$worktree_list"
    
    if [[ "$found_agents" == false ]]; then
        print_info "No active ribbit worktrees found"
    fi
}

main "$@"